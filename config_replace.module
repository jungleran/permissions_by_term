<?php

/**
 * @file
 * Allows modules to rewrite configuration provided by other extensions.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_module_preinstall().
 *
 * Allow config to be rewritten before a module is installed.
 */
function config_replace_module_preinstall($module) {
  \Drupal::service('config_replace.config_replacer')->rewriteModuleConfig($module);
}

/**
 * Implements hook_help().
 */
function config_replace_help($route_name, RouteMatchInterface $arg) {
  switch ($route_name) {
    case 'help.page.config_replace':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Configuration Replace module replaces existing configuration on module installation via using a "rewrite" folder
in the config directory. Stops with an error, if you are going to replace a config without having the original config
in your database (a difference to the Configuration Rewrite module).

This can be handy, if you like to replace existing configuration (like admin user email address) without the need to
use install or update hooks. You can just place your configuration YAML files into the config/rewrite directory in your
module folder. Afterwards the existing configuration will be replaced on module installation. For more information, see the project page for <a href=":documentation" target="_blank" title="Online Documentation">Configuration Replace</a>.', [':documentation' => 'https://www.drupal.org/project/config_replace']) . '</p>';

      return $output;
  }
}