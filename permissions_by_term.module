<?php
/**
 * @file
 * Allows access to terms in a vocabulary to be limited by user or role.
 */

/**
 * Implements hook_help().
 */
function permissions_by_term_help($path, $arg) {
  switch ($path) {
    case 'admin/help#permissions_by_term':
      $output = '<p>' . t('This module allows taxonomy administrators the
        ability to restrict setting individual terms on nodes by user
        or role. If a user is unable to set any terms for a required
        vocabulary, they are blocked from adding or editing content with
        that vocabulary.') . '</p>';
      $output .= '<p>' . t('To add permissions for a term, go to
        Administer >> Content Management >> Taxonomy, and add or
        edit a term. If the permissions are left blank, the term is
        available to all users.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function permissions_by_term_permission() {
  return array(
    'show term permission form on term page' => array(
      'title' => t('Term permission form on term page'),
      'description' => t('Enables the specific role to edit
      the term permissions on the term edit page.'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function permissions_by_term_menu() {
  $items = array();
  $items['permissions-by-term/autocomplete'] = array(
    'title' => '',
    'page callback' => 'permissions_by_term_autocomplete_multiple',
    'access arguments' => array('access user profiles'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function permissions_by_term_form_taxonomy_form_term_alter(&$form, $form_state, $form_id) {
  if (user_access('show term permission form on term page')) {
    // This is the add / edit term form from the taxonomy page.
    // Normally the term is an array, but when deleting terms it becomes an
    // object. So, we cast it to an object so we can consistently reference it.
    $term = (object) $form['#term'];

    $form['access'] = array(
      '#type' => 'fieldset',
      '#title' => t('Permissions'),
      '#description' => t('To limit selection of this term by user or roles,' .
      'add users or roles to the following lists. Leave empty to allow' .
      'selection by all users.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#attributes' => array('id' => 'fieldset_term_access'),
      '#weight' => -5,
      '#tree' => TRUE,
    );
    // Pull in any stored users in the database.
    $allowed_users = array();
    if (!empty($form['tid']['#value'])) {
      $result = db_select('permissions_by_term_user')
        ->fields('permissions_by_term_user')
        ->condition('tid', $term->tid)
        ->execute()->fetchAll(PDO::FETCH_ASSOC);

      foreach ($result as $row) {

        $user = db_select('users', 'u')
          ->condition('uid', $row['uid'])
          ->fields('u', array('name'))
          ->execute()->fetchObject();

        $allowed_users[] = $user->name;
      }
    }
    $allowed_users = drupal_implode_tags($allowed_users);
    // Note that the autocomplete widget will only enable for users with the
    // 'access profiles' permission. Other users will have to specify the name
    // manually.
    $form['access']['user'] = array(
      '#type' => 'textfield',
      '#title' => t('Allowed users'),
      '#description' => t('Enter a comma-seperated list of user names to give') .
      t('them permission to use this term.'),
      '#default_value' => $allowed_users,
      '#size' => 60,
      '#autocomplete_path' => 'permissions-by-term/autocomplete',
      '#weight' => -10,
    );

    $allowed_roles = array();
    if (!empty($form['tid']['#value'])) {
      $result = db_select('permissions_by_term_role')
        ->fields('permissions_by_term_role')
        ->condition('tid', $term->tid)
        ->execute()->fetchAll(PDO::FETCH_ASSOC);

      foreach ($result as $row) {
        $allowed_roles[] = $row['rid'];
      }
    }

    // Now, lets do the Roles table.
    $form['access']['role'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Allowed roles'),
      '#description' => t('Select a role to allow all members of that role access to this term.'),
      '#default_value' => $allowed_roles,
      '#options' => user_roles(),
      '#multiple' => FALSE,
      '#weight' => 5,
    );

    $form['#validate'][] = 'permissions_by_term_validate';
    $form['#submit'][] = 'permissions_by_term_submit';
  }
}


/**
 * Implements hook_form_alter().
 */
function permissions_by_term_form_alter(&$form, $form_state, $form_id) {
  // This is the node add / edit form. If a different selector is used from
  // another contributed module, we do nothing so as to not break the form.
  if ((isset($form['type']) && isset($form['#node']) && (!variable_get('taxonomy_override_selector', FALSE)) && $form['type']['#value'] . '_node_form' == $form_id) ||
       (isset($form['#entity_type']) && isset($form['#bundle']))) {
    // Field types we are looking for.
    $types = array('taxonomy_term_reference');
    foreach (element_children($form) as $field_name) {
      if (!$field_info = field_info_field($field_name)) {
        continue;
      }
      if (!in_array('#language', $form[$field_name])) {
        continue;
      }
      $options = &$form[$field_name][$form[$field_name]['#language']]['#options'];
      if (!in_array($field_info['type'], $types) || !isset($options)) {
        continue;
      }

      foreach ($options as $tid => $name) {
        if ($tid == "_none") {
          continue;
        }

        // Now we have the term ID, check to see if the current user has
        // access to the term.
        global $user;
        if (!permissions_by_term_allowed($tid, $user)) {
          unset($options[$tid]);
        }
      }
    }
  }
}

/**
 * Validation handler for permissions_by_term_form_alter().
 */
function permissions_by_term_validate($form, &$form_state) {
  if (!empty($form_state['values']['access']['user'])) {
    $allowed_users = drupal_explode_tags($form_state['values']['access']['user']);
    foreach ($allowed_users as $name) {
      $users = user_load_multiple(array(), array('name' => $name));
      if (!(array_shift($users))) {
        form_set_error('search_user', t('The user %user_name does not exist.',
                array('%user_name' => $name)));
      }
    }
  }
}

/**
 * Submit handler for permissions_by_term_form_alter().
 */
function permissions_by_term_submit($form, &$form_state) {
  // For each user, save the term ID and the user ID.
  db_delete('permissions_by_term_user')
  ->condition('tid', $form_state['values']['tid'])
  ->execute();
  if (!empty($form_state['values']['access']['user']) &&
    $form_state['values']['op'] == t('Save')) {
    $allowed_users
      = drupal_explode_tags($form_state['values']['access']['user']);
    foreach ($allowed_users as $name) {
      $users = user_load_multiple(array(), array('name' => $name));
      $u = array_shift($users);
      db_insert('permissions_by_term_user')
      ->fields(array(
        'tid' => $form_state['values']['tid'],
        'uid' => $u->uid,
      ))
      ->execute();
    }
  }

  // For each role, save the term ID and the role ID.
  db_delete('permissions_by_term_role')
  ->condition('tid', $form_state['values']['tid'])
  ->execute();
  if (!empty($form_state['values']['access']['role']) && $form_state['values']['op'] == t('Save')) {
    foreach (array_keys(array_filter($form_state['values']['access']['role'])) as $rid) {
      db_insert('permissions_by_term_role')
        ->fields(array(
          'tid' => $form_state['values']['tid'],
          'rid' => $rid,
        ))
      ->execute();
    }
  }
}


/**
 * Implements hook_views_post_execute().
 *
 * Hides nodes in a view.
 */
function permissions_by_term_views_post_execute(&$view) {
  global $user;
  foreach ($view->result as $v) {

    $node = node_load($v->nid);

    $arr__nodes_to_hide_in_view = array();

    $secured_areas = field_get_items('node', $node, 'field_secured_areas');

    if (!empty($secured_areas)) {
      foreach ($secured_areas as $term) {
        if (isset($term['tid']) &&
          permissions_by_term_allowed($term['tid'], $user) === TRUE) {
          $user_is_allowed_to_view = TRUE;
        }

        if (!isset($user_is_allowed_to_view)) {
          $user_is_allowed_to_view = FALSE;
          $arr__nodes_to_hide_in_view[] = $node->nid;
        }

      }
    }

  }

  $arr__new_results = array();

  // Hide the nodes.
  foreach ($view->result as $v) {
    if (!in_array($v->nid, $arr__nodes_to_hide_in_view)) {
      $arr__new_results[] = $v;
    }
  }

  $view->result = $arr__new_results;

}

/**
 * Implements hook_node_access().
 *
 * Forwards user by drupal_access_denied(); to an access denied page, if a
 * single restricted node is called.
 */
function permissions_by_term_node_access($node, $op, $account) {

  if (isset($node->nid)) {
    $node = node_load($node->nid);
    $secured_areas = field_get_items('node', $node, 'field_secured_areas');
    if (!empty($secured_areas)) {
      global $user;
      foreach ($secured_areas as $term) {

        $term_secured_areas = $term;

        if (isset($term_secured_areas['tid']) &&
          permissions_by_term_allowed($term_secured_areas['tid'], $user) === TRUE) {
          $user_is_allowed_to_view = TRUE;
        }
        if (!isset($user_is_allowed_to_view)) {
          $user_is_allowed_to_view = FALSE;
        }
      }
    }
    if (isset($user_is_allowed_to_view) && $user_is_allowed_to_view === FALSE) {
      drupal_access_denied();
    }
  }

}

/**
 * Implements permissions_by_term_allowed().
 */
function permissions_by_term_allowed($tid, $user) {

  if ($user->uid == 1) {
    return TRUE;
  }

  // Are permissions enabled on this term?
  if (!(db_query("SELECT COUNT(1) FROM {permissions_by_term_user} WHERE tid = :tid",
    array(':tid' => $tid))->fetchField() ||
    db_query("SELECT COUNT(1) FROM {permissions_by_term_role} WHERE tid = :tid",
    array(':tid' => $tid))->fetchField())) {
    return TRUE;
  }

  /* Permissions are enabled, check to see if this user or one of their roles
     is allowed.
  */
  $user_roles = array_keys($user->roles);

  $i = 0;

  while (isset($user_roles[$i])) {

    if (db_query("SELECT uid FROM {permissions_by_term_user} WHERE tid = :tid AND uid = :uid",
        array(':tid' => $tid, ':uid' => $user->uid))->fetchField() ||
        db_query("SELECT rid FROM {permissions_by_term_role} WHERE tid = :tid AND rid IN (:user_roles)",
        array(':tid' => $tid, ':user_roles' => $user_roles[$i]))->fetchField()) {
      return TRUE;
    }

    $i++;

  }

  return FALSE;

}

/**
 * Implements permissions_by_term_autocomplete_multiple().
 *
 * Returns Json array for Taxonomy Term Permissions autocomplete fields.
 * Supports multiple entries separated by a comma.
 */
function permissions_by_term_autocomplete_multiple($string) {
  // The user enters a comma-separated list of users.
  // We only autocomplete the last user.
  $array = drupal_explode_tags($string);

  // Fetch last user.
  $last_string = trim(array_pop($array));

  $matches = array();
  $result = db_select('users')->fields('users', array('name'))->condition('name',
            db_like($last_string) . '%', 'LIKE')->range(0, 10)->execute();

  $prefix = count($array) ? implode(', ', $array) . ', ' : '';

  foreach ($result as $user) {
    $matches[$prefix . $user->name] = check_plain($user->name);
  }
  drupal_json_output($matches);
}
